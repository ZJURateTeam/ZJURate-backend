{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"ZJURate Backend","text":"<p>The backend server of the ZJURate Project.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>git clone https://github.com/ZJURateTeam/ZJURate-backend\ncd ZJURate-backend\ngo mod tidy\ngo build\n</code></pre> <p>This will create an executable named <code>ZJURate-backend</code> (or <code>ZJURate-backend.exe</code> on Windows) in your current directory.</p> <p>or Releases</p>"},{"location":"#documentation","title":"Documentation","text":""},{"location":"API/","title":"API Documentation","text":""},{"location":"API/#authentication","title":"Authentication","text":""},{"location":"API/#merchants","title":"Merchants","text":""},{"location":"API/#reviews","title":"Reviews","text":""},{"location":"API/#files","title":"Files","text":""},{"location":"API/authentication/","title":"Authentication","text":"<p>These endpoints handle user registration, login, and profile retrieval.</p>"},{"location":"API/authentication/#post-apiauthregister","title":"<code>POST /api/auth/register</code>","text":"<ul> <li>Description: Registers a new user.</li> <li>Request Body: <pre><code>{\n  \"studentId\": \"string\",\n  \"username\": \"string\",\n  \"password\": \"string\"\n}\n</code></pre></li> <li>Response Body (Success): <pre><code>{\n  \"message\": \"Register Successful\"\n}\n</code></pre></li> <li>Response Body (Failure): <pre><code>{\n  \"message\": \"Registration failed\",\n  \"error\": \"string\"\n}\n</code></pre></li> </ul>"},{"location":"API/authentication/#post-apiauthlogin","title":"<code>POST /api/auth/login</code>","text":"<ul> <li>Description: Logs in a user and returns a JWT token for subsequent authenticated requests.</li> <li>Request Body: <pre><code>{\n  \"studentId\": \"string\",\n  \"password\": \"string\"\n}\n</code></pre></li> <li>Response Body (Success): <pre><code>{\n  \"token\": \"string\",\n  \"user\": {\n    \"studentId\": \"string\",\n    \"username\": \"string\"\n  }\n}\n</code></pre></li> <li>Response Body (Failure): <pre><code>{\n  \"message\": \"Authentication failed\",\n  \"error\": \"string\"\n}\n</code></pre></li> </ul>"},{"location":"API/authentication/#get-apiauthme","title":"<code>GET /api/auth/me</code>","text":"<ul> <li>Description: Retrieves the profile of the currently authenticated user. Requires a valid JWT in the <code>Authorization</code> header.</li> <li>Headers:<ul> <li><code>Authorization: Bearer &lt;token&gt;</code></li> </ul> </li> <li>Response Body (Success): <pre><code>{\n  \"studentId\": \"string\",\n  \"username\": \"string\"\n}\n</code></pre></li> <li>Response Body (Failure): <pre><code>{\n  \"message\": \"Unauthorized\"\n}\n</code></pre></li> </ul>"},{"location":"API/files/","title":"File Uploads","text":"<p>These endpoints handle image uploads.</p>"},{"location":"API/files/#post-apiuploadimage","title":"<code>POST /api/upload/image</code>","text":"<ul> <li>Description: Uploads an image file. The uploaded image's hash and URL are returned. Requires authentication.</li> <li>Headers:<ul> <li><code>Authorization: Bearer &lt;token&gt;</code></li> <li><code>Content-Type: multipart/form-data</code></li> </ul> </li> <li>Request Body: A <code>multipart/form-data</code> request containing a file field named <code>file</code>.</li> <li>Response Body (Success): <pre><code>{\n  \"message\": \"Image uploaded successfully\",\n  \"uploader\": {\n    \"studentId\": \"string\",\n    \"username\": \"string\"\n  },\n  \"imageHash\": \"string\",\n  \"imageURL\": \"string\"\n}\n</code></pre></li> </ul>"},{"location":"API/merchants/","title":"Merchants","text":"<p>These endpoints manage merchant-related data.</p>"},{"location":"API/merchants/#get-apimerchants","title":"<code>GET /api/merchants/</code>","text":"<ul> <li>Description: Lists all merchants available on the blockchain.</li> <li>Response Body (Success): An array of merchant summaries.     <pre><code>[\n  {\n    \"id\": \"string\",\n    \"name\": \"string\",\n    \"category\": \"string\",\n    \"averageRating\": 0.0\n  }\n]\n</code></pre></li> </ul>"},{"location":"API/merchants/#get-apimerchantsid","title":"<code>GET /api/merchants/:id</code>","text":"<ul> <li>Description: Retrieves a single merchant's details, including all associated reviews.</li> <li>URL Parameters:<ul> <li><code>id</code>: The unique ID of the merchant.</li> </ul> </li> <li>Response Body (Success): <pre><code>{\n  \"id\": \"string\",\n  \"name\": \"string\",\n  \"address\": \"string\",\n  \"category\": \"string\",\n  \"averageRating\": 0.0,\n  \"reviews\": [\n    {\n      \"id\": \"string\",\n      \"merchantId\": \"string\",\n      \"authorId\": \"string\",\n      \"rating\": 0,\n      \"comment\": \"string\",\n      \"timestamp\": \"string\"\n    }\n  ]\n}\n</code></pre></li> <li>Response Body (Failure): <pre><code>{\n  \"message\": \"Merchant not found\",\n  \"error\": \"string\"\n}\n</code></pre></li> </ul>"},{"location":"API/merchants/#post-apimerchants","title":"<code>POST /api/merchants/</code>","text":"<ul> <li>Description: Creates a new merchant. Requires authentication.</li> <li>Headers:<ul> <li><code>Authorization: Bearer &lt;token&gt;</code></li> </ul> </li> <li>Request Body: <pre><code>{\n  \"id\": \"string\",\n  \"name\": \"string\",\n  \"address\": \"string\",\n  \"category\": \"string\"\n}\n</code></pre></li> <li>Response Body (Success): <pre><code>{\n  \"message\": \"Merchant creation submitted successfully\",\n  \"txId\": \"string\"\n}\n</code></pre></li> </ul>"},{"location":"API/reviews/","title":"Reviews","text":"<p>These endpoints handle the submission and retrieval of reviews.</p>"},{"location":"API/reviews/#post-apireviews","title":"<code>POST /api/reviews/</code>","text":"<ul> <li>Description: Submits a new review for a merchant. Requires authentication.</li> <li>Headers:<ul> <li><code>Authorization: Bearer &lt;token&gt;</code></li> </ul> </li> <li>Request Body: <pre><code>{\n  \"merchantId\": \"string\",\n  \"rating\": 0,\n  \"comment\": \"string\",\n  \"imageHash\": \"string\"\n}\n</code></pre></li> <li>Response Body (Success): <pre><code>{\n  \"message\": \"Review submitted successfully, waiting for blockchain confirmation\",\n  \"txId\": \"string\"\n}\n</code></pre></li> </ul>"},{"location":"API/reviews/#get-apireviewsmy","title":"<code>GET /api/reviews/my</code>","text":"<ul> <li>Description: Fetches all reviews submitted by the currently authenticated user.</li> <li>Headers:<ul> <li><code>Authorization: Bearer &lt;token&gt;</code></li> </ul> </li> <li>Response Body (Success): An array of reviews.     <pre><code>[\n  {\n    \"id\": \"string\",\n    \"merchantId\": \"string\",\n    \"authorId\": \"string\",\n    \"rating\": 0,\n    \"comment\": \"string\",\n    \"timestamp\": \"string\"\n  }\n]\n</code></pre></li> </ul>"},{"location":"Configuration/","title":"Configuration","text":"<p>The application uses a <code>config.yml</code> file to manage all service configurations. A sample file is provided below. You can specify a different path using the <code>-config</code> flag when running the application.</p>"},{"location":"Configuration/#configyml-format","title":"<code>config.yml</code> Format","text":"<pre><code>app:\n  port: 8080 # The port on which the API server will listen.\n\nfabric:\n  ca:\n    url: \"https://your-ca-server:7054\" # The URL of the Fabric CA server.\n    caName: \"ca-org1\" # The name of the CA.\n    tlsCACert: \"path/to/ca-tls-cert.pem\" # Path to the CA's TLS certificate.\n  client:\n    homeDir: \"./data\" # The directory for storing MSP and cryptographic materials.\n    mspDir: \"msp\" # The subdirectory for MSP.\n  registrar:\n    id: \"admin\" # The ID of the registrar user.\n    secret: \"adminpw\" # The password for the registrar user.\n  peers:\n    - url: \"grpc://peer0.org1.example.com:7051\" # A list of Fabric peer endpoints.\n      name: \"peer0.org1.example.com\"\n      tlsRootCert: \"path/to/peer-tls-cert.pem\" # Path to the peer's TLS certificate.\n\njwt:\n  secretKey: \"YourSuperSecretJWTKey\" # The secret key for signing JWT tokens.\n</code></pre>"}]}